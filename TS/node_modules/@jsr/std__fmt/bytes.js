// Copyright 2014-2021 Sindre Sorhus. All rights reserved. MIT license.
// Copyright 2021 Yoshiya Hinosawa. All rights reserved. MIT license.
// Copyright 2021 Giuseppe Eletto. All rights reserved. MIT license.
// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
// This module is browser compatible.
/**
 * Convert bytes to a human-readable string: 1337 â†’ 1.34 kB
 *
 * Based on {@link https://github.com/sindresorhus/pretty-bytes | pretty-bytes}.
 * A utility for displaying file sizes for humans.
 *
 * This module is browser compatible.
 *
 * @example
 * ```ts
 * import { format } from "@std/fmt/bytes";
 *
 * format(1337);
 * //=> '1.34 kB'
 *
 * format(100);
 * //=> '100 B'
 *
 * // Display with units of bits
 * format(1337, { bits: true });
 * //=> '1.34 kbit'
 *
 * // Display file size differences
 * format(42, { signed: true });
 * //=> '+42 B'
 *
 * // Localized output using German locale
 * format(1337, { locale: "de" });
 * //=> '1,34 kB'
 * ```
 */ export function format(num, options = {}) {
  if (!Number.isFinite(num)) {
    throw new TypeError(`Expected a finite number, got ${typeof num}: ${num}`);
  }
  const UNITS_FIRSTLETTER = (options.bits ? "b" : "B") + "kMGTPEZY";
  if (options.signed && num === 0) {
    return ` 0 ${UNITS_FIRSTLETTER[0]}`;
  }
  const prefix = num < 0 ? "-" : options.signed ? "+" : "";
  num = Math.abs(num);
  const localeOptions = getLocaleOptions(options);
  if (num < 1) {
    const numberString = toLocaleString(num, options.locale, localeOptions);
    return prefix + numberString + " " + UNITS_FIRSTLETTER[0];
  }
  const exponent = Math.min(Math.floor(options.binary ? Math.log(num) / Math.log(1024) : Math.log10(num) / 3), UNITS_FIRSTLETTER.length - 1);
  num /= Math.pow(options.binary ? 1024 : 1000, exponent);
  if (!localeOptions) {
    num = Number(num.toPrecision(3));
  }
  const numberString = toLocaleString(num, options.locale, localeOptions);
  let unit = UNITS_FIRSTLETTER[exponent];
  if (exponent > 0) {
    unit += options.binary ? "i" : "";
    unit += options.bits ? "bit" : "B";
  }
  return prefix + numberString + " " + unit;
}
function getLocaleOptions({ maximumFractionDigits, minimumFractionDigits }) {
  if (maximumFractionDigits || minimumFractionDigits) {
    return {
      maximumFractionDigits,
      minimumFractionDigits
    };
  }
}
/**
 * Formats the given number using `Number#toLocaleString`.
 * - If locale is a string, the value is expected to be a locale-key (for example: `de`).
 * - If locale is true, the system default locale is used for translation.
 * - If no value for locale is specified, the number is returned unmodified.
 */ function toLocaleString(num, locale, options) {
  if (typeof locale === "string" || Array.isArray(locale)) {
    return num.toLocaleString(locale, options);
  } else if (locale === true || options !== undefined) {
    return num.toLocaleString(undefined, options);
  }
  return num.toString();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ5dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHVFQUF1RTtBQUN2RSxxRUFBcUU7QUFDckUsb0VBQW9FO0FBQ3BFLDBFQUEwRTtBQUMxRSxxQ0FBcUM7QUFpRHJDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0E4QkMsR0FDRCxPQUFPLFNBQVMsT0FDZCxHQUFXLEVBQ1gsVUFBeUIsQ0FBQyxDQUFDO0VBRTNCLElBQUksQ0FBQyxPQUFPLFFBQVEsQ0FBQyxNQUFNO0lBQ3pCLE1BQU0sSUFBSSxVQUFVLENBQUMsOEJBQThCLEVBQUUsT0FBTyxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUM7RUFDM0U7RUFFQSxNQUFNLG9CQUFvQixDQUFDLFFBQVEsSUFBSSxHQUFHLE1BQU0sR0FBRyxJQUFJO0VBRXZELElBQUksUUFBUSxNQUFNLElBQUksUUFBUSxHQUFHO0lBQy9CLE9BQU8sQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDckM7RUFFQSxNQUFNLFNBQVMsTUFBTSxJQUFJLE1BQU8sUUFBUSxNQUFNLEdBQUcsTUFBTTtFQUN2RCxNQUFNLEtBQUssR0FBRyxDQUFDO0VBRWYsTUFBTSxnQkFBZ0IsaUJBQWlCO0VBRXZDLElBQUksTUFBTSxHQUFHO0lBQ1gsTUFBTSxlQUFlLGVBQWUsS0FBSyxRQUFRLE1BQU0sRUFBRTtJQUN6RCxPQUFPLFNBQVMsZUFBZSxNQUFNLGlCQUFpQixDQUFDLEVBQUU7RUFDM0Q7RUFFQSxNQUFNLFdBQVcsS0FBSyxHQUFHLENBQ3ZCLEtBQUssS0FBSyxDQUNSLFFBQVEsTUFBTSxHQUFHLEtBQUssR0FBRyxDQUFDLE9BQU8sS0FBSyxHQUFHLENBQUMsUUFBUSxLQUFLLEtBQUssQ0FBQyxPQUFPLElBRXRFLGtCQUFrQixNQUFNLEdBQUc7RUFFN0IsT0FBTyxLQUFLLEdBQUcsQ0FBQyxRQUFRLE1BQU0sR0FBRyxPQUFPLE1BQU07RUFFOUMsSUFBSSxDQUFDLGVBQWU7SUFDbEIsTUFBTSxPQUFPLElBQUksV0FBVyxDQUFDO0VBQy9CO0VBRUEsTUFBTSxlQUFlLGVBQ25CLEtBQ0EsUUFBUSxNQUFNLEVBQ2Q7RUFHRixJQUFJLE9BQU8saUJBQWlCLENBQUMsU0FBUztFQUN0QyxJQUFJLFdBQVcsR0FBRztJQUNoQixRQUFRLFFBQVEsTUFBTSxHQUFHLE1BQU07SUFDL0IsUUFBUSxRQUFRLElBQUksR0FBRyxRQUFRO0VBQ2pDO0VBRUEsT0FBTyxTQUFTLGVBQWUsTUFBTTtBQUN2QztBQUVBLFNBQVMsaUJBQ1AsRUFBRSxxQkFBcUIsRUFBRSxxQkFBcUIsRUFBaUI7RUFFL0QsSUFBSSx5QkFBeUIsdUJBQXVCO0lBQ2xELE9BQU87TUFDTDtNQUNBO0lBQ0Y7RUFDRjtBQUNGO0FBRUE7Ozs7O0NBS0MsR0FDRCxTQUFTLGVBQ1AsR0FBVyxFQUNYLE1BQStDLEVBQy9DLE9BQWtDO0VBRWxDLElBQUksT0FBTyxXQUFXLFlBQVksTUFBTSxPQUFPLENBQUMsU0FBUztJQUN2RCxPQUFPLElBQUksY0FBYyxDQUFDLFFBQVE7RUFDcEMsT0FBTyxJQUFJLFdBQVcsUUFBUSxZQUFZLFdBQVc7SUFDbkQsT0FBTyxJQUFJLGNBQWMsQ0FBQyxXQUFXO0VBQ3ZDO0VBRUEsT0FBTyxJQUFJLFFBQVE7QUFDckIifQ==