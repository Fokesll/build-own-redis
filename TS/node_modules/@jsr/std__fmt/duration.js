// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
// This module is browser compatible.
/**
 * Format milliseconds to time duration.
 *
 * ```ts
 * import { format } from "@std/fmt/duration";
 *
 * // "00:00:01:39:674:000:000"
 * format(99674, { style: "digital" });
 *
 * // "0d 0h 1m 39s 674ms 0µs 0ns"
 * format(99674);
 *
 * // "1m 39s 674ms"
 * format(99674, { ignoreZero: true });
 *
 * // "1 minutes, 39 seconds, 674 milliseconds"
 * format(99674, { style: "full", ignoreZero: true });
 * ```
 * @module
 */ function addZero(num, digits) {
  return String(num).padStart(digits, "0");
}
const keyList = {
  d: "days",
  h: "hours",
  m: "minutes",
  s: "seconds",
  ms: "milliseconds",
  us: "microseconds",
  ns: "nanoseconds"
};
/** Parse milliseconds into a duration. */ function millisecondsToDurationObject(ms) {
  // Duration cannot be negative
  const millis = Math.abs(ms);
  const millisFraction = millis.toFixed(7).slice(-7, -1);
  return {
    d: Math.trunc(millis / 86400000),
    h: Math.trunc(millis / 3600000) % 24,
    m: Math.trunc(millis / 60000) % 60,
    s: Math.trunc(millis / 1000) % 60,
    ms: Math.trunc(millis) % 1000,
    us: +millisFraction.slice(0, 3),
    ns: +millisFraction.slice(3, 6)
  };
}
function durationArray(duration) {
  return [
    {
      type: "d",
      value: duration.d
    },
    {
      type: "h",
      value: duration.h
    },
    {
      type: "m",
      value: duration.m
    },
    {
      type: "s",
      value: duration.s
    },
    {
      type: "ms",
      value: duration.ms
    },
    {
      type: "us",
      value: duration.us
    },
    {
      type: "ns",
      value: duration.ns
    }
  ];
}
/**
 * Format milliseconds to time duration.
 *
 * ```ts
 * import { format } from "@std/fmt/duration";
 *
 * format(99674, { style: "digital" }); // "00:00:01:39:674:000:000"
 * format(99674); // "0d 0h 1m 39s 674ms 0µs 0ns"
 * format(99674, { ignoreZero: true }); // "1m 39s 674ms"
 * format(99674, { style: "full", ignoreZero: true }); // "1 minutes, 39 seconds, 674 milliseconds"
 * ```
 */ export function format(ms, options = {}) {
  const opt = Object.assign({
    style: "narrow",
    ignoreZero: false
  }, options);
  const duration = millisecondsToDurationObject(ms);
  const durationArr = durationArray(duration);
  switch(opt.style){
    case "narrow":
      {
        if (opt.ignoreZero) {
          return `${durationArr.filter((x)=>x.value).map((x)=>`${x.value}${x.type === "us" ? "µs" : x.type}`).join(" ")}`;
        }
        return `${durationArr.map((x)=>`${x.value}${x.type === "us" ? "µs" : x.type}`).join(" ")}`;
      }
    case "full":
      {
        if (opt.ignoreZero) {
          return `${durationArr.filter((x)=>x.value).map((x)=>`${x.value} ${keyList[x.type]}`).join(", ")}`;
        }
        return `${durationArr.map((x)=>`${x.value} ${keyList[x.type]}`).join(", ")}`;
      }
    case "digital":
      {
        const arr = durationArr.map((x)=>[
            "ms",
            "us",
            "ns"
          ].includes(x.type) ? addZero(x.value, 3) : addZero(x.value, 2));
        if (opt.ignoreZero) {
          let cont = true;
          while(cont){
            if (!Number(arr[arr.length - 1])) arr.pop();
            else cont = false;
          }
        }
        return arr.join(":");
      }
    default:
      {
        throw new TypeError(`style must be "narrow", "full", or "digital"!`);
      }
  }
}
//# sourceMappingURL=data:application/json;base64,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