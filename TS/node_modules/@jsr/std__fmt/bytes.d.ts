/** Options for {@linkcode format}. */ export interface FormatOptions {
  /**
   * Uses bits representation.
   *
   * @default {false}
   */ bits?: boolean;
  /**
   * Uses binary bytes (e.g. kibibyte).
   *
   * @default {false}
   */ binary?: boolean;
  /**
   * Include plus sign for positive numbers.
   *
   * @default {false}
   */ signed?: boolean;
  /**
   * Uses localized number formatting. If it is set to true, uses default
   * locale on the system. If it's set to string, uses that locale. The given
   * string should be a
   * {@link https://en.wikipedia.org/wiki/IETF_language_tag | BCP 47 language tag}.
   * You can also give the list of language tags.
   */ locale?: boolean | string | string[];
  /**
   * The minimum number of fraction digits to display. If neither
   * {@linkcode minimumFractionDigits} or {@linkcode maximumFractionDigits}
   * are set, the default behavior is to round to 3 significant digits.
   */ minimumFractionDigits?: number;
  /**
   * The maximum number of fraction digits to display. If neither
   * {@linkcode minimumFractionDigits} or {@linkcode maximumFractionDigits}
   * are set, the default behavior is to round to 3 significant digits.
   */ maximumFractionDigits?: number;
}
/**
 * Convert bytes to a human-readable string: 1337 â†’ 1.34 kB
 *
 * Based on {@link https://github.com/sindresorhus/pretty-bytes | pretty-bytes}.
 * A utility for displaying file sizes for humans.
 *
 * This module is browser compatible.
 *
 * @example
 * ```ts
 * import { format } from "@std/fmt/bytes";
 *
 * format(1337);
 * //=> '1.34 kB'
 *
 * format(100);
 * //=> '100 B'
 *
 * // Display with units of bits
 * format(1337, { bits: true });
 * //=> '1.34 kbit'
 *
 * // Display file size differences
 * format(42, { signed: true });
 * //=> '+42 B'
 *
 * // Localized output using German locale
 * format(1337, { locale: "de" });
 * //=> '1,34 kB'
 * ```
 */ export declare function format(num: number, options?: FormatOptions): string;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ5dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVdBLG9DQUFvQyxHQUNwQyxpQkFBaUI7RUFDZjs7OztHQUlDLEdBQ0QsT0FBTyxPQUFPO0VBQ2Q7Ozs7R0FJQyxHQUNELFNBQVMsT0FBTztFQUNoQjs7OztHQUlDLEdBQ0QsU0FBUyxPQUFPO0VBQ2hCOzs7Ozs7R0FNQyxHQUNELFNBQVMsT0FBTyxHQUFHLE1BQU0sR0FBRyxNQUFNO0VBQ2xDOzs7O0dBSUMsR0FDRCx3QkFBd0IsTUFBTTtFQUM5Qjs7OztHQUlDLEdBQ0Qsd0JBQXdCLE1BQU07O0FBR2hDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0E4QkMsR0FDRCxPQUFPLGlCQUFTLE9BQ2QsS0FBSyxNQUFNLEVBQ1gsVUFBUyxhQUFrQixHQUMxQixNQUFNIn0=