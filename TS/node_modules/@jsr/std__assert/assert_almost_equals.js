// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
// This module is browser compatible.
import { AssertionError } from "./assertion_error.js";
/**
 * Make an assertion that `actual` and `expected` are almost equal numbers
 * through a given tolerance. It can be used to take into account IEEE-754
 * double-precision floating-point representation limitations. If the values
 * are not almost equal then throw.
 *
 * @example
 * ```ts
 * import { assertAlmostEquals } from "@std/assert";
 *
 * assertAlmostEquals(0.01, 0.02, 0.1); // Doesn't throw
 * assertAlmostEquals(0.01, 0.02); // Throws
 * assertAlmostEquals(0.1 + 0.2, 0.3, 1e-16); // Doesn't throw
 * assertAlmostEquals(0.1 + 0.2, 0.3, 1e-17); // Throws
 * ```
 */ export function assertAlmostEquals(actual, expected, tolerance = 1e-7, msg) {
  if (Object.is(actual, expected)) {
    return;
  }
  const delta = Math.abs(expected - actual);
  if (delta <= tolerance) {
    return;
  }
  const msgSuffix = msg ? `: ${msg}` : ".";
  const f = (n)=>Number.isInteger(n) ? n : n.toExponential();
  throw new AssertionError(`Expected actual: "${f(actual)}" to be close to "${f(expected)}": \
delta "${f(delta)}" is greater than "${f(tolerance)}"${msgSuffix}`);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2VydF9hbG1vc3RfZXF1YWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBFQUEwRTtBQUMxRSxxQ0FBcUM7QUFDckMsU0FBUyxjQUFjLCtCQUErQjtBQUV0RDs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDRCxPQUFPLFNBQVMsbUJBQ2QsTUFBYyxFQUNkLFFBQWdCLEVBQ2hCLFlBQVksSUFBSSxFQUNoQixHQUFZO0VBRVosSUFBSSxPQUFPLEVBQUUsQ0FBQyxRQUFRLFdBQVc7SUFDL0I7RUFDRjtFQUNBLE1BQU0sUUFBUSxLQUFLLEdBQUcsQ0FBQyxXQUFXO0VBQ2xDLElBQUksU0FBUyxXQUFXO0lBQ3RCO0VBQ0Y7RUFFQSxNQUFNLFlBQVksTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsR0FBRztFQUNyQyxNQUFNLElBQUksQ0FBQyxJQUFjLE9BQU8sU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFLGFBQWE7RUFDbEUsTUFBTSxJQUFJLGVBQ1IsQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLFFBQVEsa0JBQWtCLEVBQUUsRUFBRSxVQUFVO09BQzVELEVBQUUsRUFBRSxPQUFPLG1CQUFtQixFQUFFLEVBQUUsV0FBVyxDQUFDLEVBQUUsVUFBVSxDQUFDO0FBRWxFIn0=