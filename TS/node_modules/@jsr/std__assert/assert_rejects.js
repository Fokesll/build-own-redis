// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
// This module is browser compatible.
import { AssertionError } from "./assertion_error.js";
import { assertIsError } from "./assert_is_error.js";
export async function assertRejects(fn, errorClassOrMsg, msgIncludesOrMsg, msg) {
  // deno-lint-ignore no-explicit-any
  let ErrorClass = undefined;
  let msgIncludes = undefined;
  let err;
  if (typeof errorClassOrMsg !== "string") {
    if (errorClassOrMsg === undefined || errorClassOrMsg.prototype instanceof Error || errorClassOrMsg.prototype === Error.prototype) {
      // deno-lint-ignore no-explicit-any
      ErrorClass = errorClassOrMsg;
      msgIncludes = msgIncludesOrMsg;
    }
  } else {
    msg = errorClassOrMsg;
  }
  let doesThrow = false;
  let isPromiseReturned = false;
  const msgSuffix = msg ? `: ${msg}` : ".";
  try {
    const possiblePromise = fn();
    if (possiblePromise && typeof possiblePromise === "object" && typeof possiblePromise.then === "function") {
      isPromiseReturned = true;
      await possiblePromise;
    }
  } catch (error) {
    if (!isPromiseReturned) {
      throw new AssertionError(`Function throws when expected to reject${msgSuffix}`);
    }
    if (ErrorClass) {
      if (error instanceof Error === false) {
        throw new AssertionError(`A non-Error object was rejected${msgSuffix}`);
      }
      assertIsError(error, ErrorClass, msgIncludes, msg);
    }
    err = error;
    doesThrow = true;
  }
  if (!doesThrow) {
    throw new AssertionError(`Expected function to reject${msgSuffix}`);
  }
  return err;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2VydF9yZWplY3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBFQUEwRTtBQUMxRSxxQ0FBcUM7QUFDckMsU0FBUyxjQUFjLCtCQUErQjtBQUN0RCxTQUFTLGFBQWEsK0JBQStCO0FBeUNyRCxPQUFPLGVBQWUsY0FDcEIsRUFBOEIsRUFDOUIsZUFHVSxFQUNWLGdCQUF5QixFQUN6QixHQUFZO0VBRVosbUNBQW1DO0VBQ25DLElBQUksYUFBc0Q7RUFDMUQsSUFBSSxjQUFrQztFQUN0QyxJQUFJO0VBRUosSUFBSSxPQUFPLG9CQUFvQixVQUFVO0lBQ3ZDLElBQ0Usb0JBQW9CLGFBQ3BCLGdCQUFnQixTQUFTLFlBQVksU0FDckMsZ0JBQWdCLFNBQVMsS0FBSyxNQUFNLFNBQVMsRUFDN0M7TUFDQSxtQ0FBbUM7TUFDbkMsYUFBYTtNQUNiLGNBQWM7SUFDaEI7RUFDRixPQUFPO0lBQ0wsTUFBTTtFQUNSO0VBQ0EsSUFBSSxZQUFZO0VBQ2hCLElBQUksb0JBQW9CO0VBQ3hCLE1BQU0sWUFBWSxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxHQUFHO0VBQ3JDLElBQUk7SUFDRixNQUFNLGtCQUFrQjtJQUN4QixJQUNFLG1CQUNBLE9BQU8sb0JBQW9CLFlBQzNCLE9BQU8sZ0JBQWdCLElBQUksS0FBSyxZQUNoQztNQUNBLG9CQUFvQjtNQUNwQixNQUFNO0lBQ1I7RUFDRixFQUFFLE9BQU8sT0FBTztJQUNkLElBQUksQ0FBQyxtQkFBbUI7TUFDdEIsTUFBTSxJQUFJLGVBQ1IsQ0FBQyx1Q0FBdUMsRUFBRSxVQUFVLENBQUM7SUFFekQ7SUFDQSxJQUFJLFlBQVk7TUFDZCxJQUFJLGlCQUFpQixVQUFVLE9BQU87UUFDcEMsTUFBTSxJQUFJLGVBQWUsQ0FBQywrQkFBK0IsRUFBRSxVQUFVLENBQUM7TUFDeEU7TUFDQSxjQUNFLE9BQ0EsWUFDQSxhQUNBO0lBRUo7SUFDQSxNQUFNO0lBQ04sWUFBWTtFQUNkO0VBQ0EsSUFBSSxDQUFDLFdBQVc7SUFDZCxNQUFNLElBQUksZUFDUixDQUFDLDJCQUEyQixFQUFFLFVBQVUsQ0FBQztFQUU3QztFQUNBLE9BQU87QUFDVCJ9