// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
// This module is browser compatible.
function isKeyedCollection(x) {
  return [
    Symbol.iterator,
    "size"
  ].every((k)=>k in x);
}
function constructorsEqual(a, b) {
  return a.constructor === b.constructor || a.constructor === Object && !b.constructor || !a.constructor && b.constructor === Object;
}
/**
 * Deep equality comparison used in assertions
 * @param c actual value
 * @param d expected value
 *
 * @example
 * ```ts
 * import { equal } from "@std/assert/equal";
 *
 * equal({ foo: "bar" }, { foo: "bar" }); // Returns `true`
 * equal({ foo: "bar" }, { foo: "baz" }); // Returns `false
 * ```
 */ export function equal(c, d) {
  const seen = new Map();
  return function compare(a, b) {
    // Have to render RegExp & Date for string comparison
    // unless it's mistreated as object
    if (a && b && (a instanceof RegExp && b instanceof RegExp || a instanceof URL && b instanceof URL)) {
      return String(a) === String(b);
    }
    if (a instanceof Date && b instanceof Date) {
      const aTime = a.getTime();
      const bTime = b.getTime();
      // Check for NaN equality manually since NaN is not
      // equal to itself.
      if (Number.isNaN(aTime) && Number.isNaN(bTime)) {
        return true;
      }
      return aTime === bTime;
    }
    if (typeof a === "number" && typeof b === "number") {
      return Number.isNaN(a) && Number.isNaN(b) || a === b;
    }
    if (Object.is(a, b)) {
      return true;
    }
    if (a && typeof a === "object" && b && typeof b === "object") {
      if (a && b && !constructorsEqual(a, b)) {
        return false;
      }
      if (a instanceof WeakMap || b instanceof WeakMap) {
        if (!(a instanceof WeakMap && b instanceof WeakMap)) return false;
        throw new TypeError("cannot compare WeakMap instances");
      }
      if (a instanceof WeakSet || b instanceof WeakSet) {
        if (!(a instanceof WeakSet && b instanceof WeakSet)) return false;
        throw new TypeError("cannot compare WeakSet instances");
      }
      if (seen.get(a) === b) {
        return true;
      }
      if (Object.keys(a || {}).length !== Object.keys(b || {}).length) {
        return false;
      }
      seen.set(a, b);
      if (isKeyedCollection(a) && isKeyedCollection(b)) {
        if (a.size !== b.size) {
          return false;
        }
        let unmatchedEntries = a.size;
        for (const [aKey, aValue] of a.entries()){
          for (const [bKey, bValue] of b.entries()){
            /* Given that Map keys can be references, we need
             * to ensure that they are also deeply equal */ if (aKey === aValue && bKey === bValue && compare(aKey, bKey) || compare(aKey, bKey) && compare(aValue, bValue)) {
              unmatchedEntries--;
              break;
            }
          }
        }
        return unmatchedEntries === 0;
      }
      const merged = {
        ...a,
        ...b
      };
      for (const key of [
        ...Object.getOwnPropertyNames(merged),
        ...Object.getOwnPropertySymbols(merged)
      ]){
        if (!compare(a && a[key], b && b[key])) {
          return false;
        }
        if (key in a && !(key in b) || key in b && !(key in a)) {
          return false;
        }
      }
      if (a instanceof WeakRef || b instanceof WeakRef) {
        if (!(a instanceof WeakRef && b instanceof WeakRef)) return false;
        return compare(a.deref(), b.deref());
      }
      return true;
    }
    return false;
  }(c, d);
}
//# sourceMappingURL=data:application/json;base64,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