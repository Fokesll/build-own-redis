// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
// This module is browser compatible.
import { AssertionError } from "./assertion_error.js";
import { stripAnsiCode } from "@jsr/std__fmt/colors";
/**
 * Make an assertion that `error` is an `Error`.
 * If not then an error will be thrown.
 * An error class and a string that should be included in the
 * error message can also be asserted.
 *
 * @example
 * ```ts
 * import { assertIsError } from "@std/assert/assert-is-error";
 *
 * assertIsError(null); // Throws
 * assertIsError(new RangeError("Out of range")); // Doesn't throw
 * assertIsError(new RangeError("Out of range"), SyntaxError); // Throws
 * assertIsError(new RangeError("Out of range"), SyntaxError, "Out of range"); // Doesn't throw
 * assertIsError(new RangeError("Out of range"), SyntaxError, "Within range"); // Throws
 * ```
 */ export function assertIsError(error, // deno-lint-ignore no-explicit-any
ErrorClass, msgMatches, msg) {
  const msgSuffix = msg ? `: ${msg}` : ".";
  if (!(error instanceof Error)) {
    throw new AssertionError(`Expected "error" to be an Error object${msgSuffix}}`);
  }
  if (ErrorClass && !(error instanceof ErrorClass)) {
    msg = `Expected error to be instance of "${ErrorClass.name}", but was "${typeof error === "object" ? error?.constructor?.name : "[not an object]"}"${msgSuffix}`;
    throw new AssertionError(msg);
  }
  let msgCheck;
  if (typeof msgMatches === "string") {
    msgCheck = stripAnsiCode(error.message).includes(stripAnsiCode(msgMatches));
  }
  if (msgMatches instanceof RegExp) {
    msgCheck = msgMatches.test(stripAnsiCode(error.message));
  }
  if (msgMatches && !msgCheck) {
    msg = `Expected error message to include ${msgMatches instanceof RegExp ? msgMatches.toString() : JSON.stringify(msgMatches)}, but got ${error instanceof Error ? JSON.stringify(error.message) : '"[not an Error]"' // TODO(kt3k): show more useful information
    }${msgSuffix}`;
    throw new AssertionError(msg);
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2VydF9pc19lcnJvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwRUFBMEU7QUFDMUUscUNBQXFDO0FBQ3JDLFNBQVMsY0FBYywrQkFBK0I7QUFDdEQsU0FBUyxhQUFhLCtCQUF3QztBQUU5RDs7Ozs7Ozs7Ozs7Ozs7OztDQWdCQyxHQUNELE9BQU8sU0FBUyxjQUNkLEtBQWMsRUFDZCxtQ0FBbUM7QUFDbkMsVUFBc0MsRUFDdEMsVUFBNEIsRUFDNUIsR0FBWTtFQUVaLE1BQU0sWUFBWSxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxHQUFHO0VBQ3JDLElBQUksQ0FBQyxDQUFDLGlCQUFpQixLQUFLLEdBQUc7SUFDN0IsTUFBTSxJQUFJLGVBQ1IsQ0FBQyxzQ0FBc0MsRUFBRSxVQUFVLENBQUMsQ0FBQztFQUV6RDtFQUNBLElBQUksY0FBYyxDQUFDLENBQUMsaUJBQWlCLFVBQVUsR0FBRztJQUNoRCxNQUFNLENBQUMsa0NBQWtDLEVBQUUsV0FBVyxJQUFJLENBQUMsWUFBWSxFQUNyRSxPQUFPLFVBQVUsV0FBVyxPQUFPLGFBQWEsT0FBTyxrQkFDeEQsQ0FBQyxFQUFFLFVBQVUsQ0FBQztJQUNmLE1BQU0sSUFBSSxlQUFlO0VBQzNCO0VBQ0EsSUFBSTtFQUNKLElBQUksT0FBTyxlQUFlLFVBQVU7SUFDbEMsV0FBVyxjQUFjLE1BQU0sT0FBTyxFQUFFLFFBQVEsQ0FDOUMsY0FBYztFQUVsQjtFQUNBLElBQUksc0JBQXNCLFFBQVE7SUFDaEMsV0FBVyxXQUFXLElBQUksQ0FBQyxjQUFjLE1BQU0sT0FBTztFQUN4RDtFQUVBLElBQUksY0FBYyxDQUFDLFVBQVU7SUFDM0IsTUFBTSxDQUFDLGtDQUFrQyxFQUN2QyxzQkFBc0IsU0FDbEIsV0FBVyxRQUFRLEtBQ25CLEtBQUssU0FBUyxDQUFDLFlBQ3BCLFVBQVUsRUFDVCxpQkFBaUIsUUFDYixLQUFLLFNBQVMsQ0FBQyxNQUFNLE9BQU8sSUFDNUIsbUJBQW1CLDJDQUEyQztLQUNuRSxFQUFFLFVBQVUsQ0FBQztJQUNkLE1BQU0sSUFBSSxlQUFlO0VBQzNCO0FBQ0YifQ==