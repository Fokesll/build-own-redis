/**
 * Utilities for working with OS-specific file paths.
 *
 * Functions from this module will automatically switch to support the path style
 * of the current OS, either `windows` for Microsoft Windows, or `posix` for
 * every other operating system, eg. Linux, MacOS, BSD etc.
 *
 * To use functions for a specific path style regardless of the current OS
 * import the modules from the platform sub directory instead.
 *
 * Example, for `posix`:
 *
 * ```ts
 * import { fromFileUrl } from "@std/path/posix/from-file-url";
 * const p = fromFileUrl("file:///home/foo");
 * console.log(p); // "/home/foo"
 * ```
 *
 * or, for `windows`:
 *
 * ```ts
 * import { fromFileUrl } from "@std/path/windows/from-file-url";
 * const p = fromFileUrl("file:///home/foo");
 * console.log(p); // "\\home\\foo"
 * ```
 *
 * This module is browser compatible.
 *
 * @module
 */ import * as _windows from "./windows/mod.d.ts";
import * as _posix from "./posix/mod.d.ts";
/** @deprecated (will be removed after 1.0.0) Import from {@link https://deno.land/std/path/windows/mod.ts} instead. */ export declare const win32: typeof _windows;
/** @deprecated (will be removed after 1.0.0) Import from {@link https://deno.land/std/path/posix/mod.ts} instead. */ export declare const posix: typeof _posix;
export * from "./basename.d.ts";
export * from "./constants.d.ts";
export * from "./dirname.d.ts";
export * from "./extname.d.ts";
export * from "./format.d.ts";
export * from "./from_file_url.d.ts";
export * from "./is_absolute.d.ts";
export * from "./join.d.ts";
export * from "./normalize.d.ts";
export * from "./parse.d.ts";
export * from "./relative.d.ts";
export * from "./resolve.d.ts";
export * from "./to_file_url.d.ts";
export * from "./to_namespaced_path.d.ts";
export * from "./common.d.ts";
export * from "./_interface.d.ts";
export * from "./glob_to_regexp.d.ts";
export * from "./is_glob.d.ts";
export * from "./join_globs.d.ts";
export * from "./normalize_glob.d.ts";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0E2QkMsR0FFRCxZQUFZLG1DQUFpQztBQUM3QyxZQUFZLCtCQUE2QjtBQUV6QyxxSEFBcUgsR0FDckgsT0FBTyxjQUFNLGNBQWMsU0FBb0I7QUFFL0MsbUhBQW1ILEdBQ25ILE9BQU8sY0FBTSxjQUFjLE9BQWdCO0FBRTNDLGdDQUE4QjtBQUM5QixpQ0FBK0I7QUFDL0IsK0JBQTZCO0FBQzdCLCtCQUE2QjtBQUM3Qiw4QkFBNEI7QUFDNUIscUNBQW1DO0FBQ25DLG1DQUFpQztBQUNqQyw0QkFBMEI7QUFDMUIsaUNBQStCO0FBQy9CLDZCQUEyQjtBQUMzQixnQ0FBOEI7QUFDOUIsK0JBQTZCO0FBQzdCLG1DQUFpQztBQUNqQywwQ0FBd0M7QUFDeEMsOEJBQTRCO0FBQzVCLGtDQUFnQztBQUNoQyxzQ0FBb0M7QUFDcEMsK0JBQTZCO0FBQzdCLGtDQUFnQztBQUNoQyxzQ0FBb0MifQ==