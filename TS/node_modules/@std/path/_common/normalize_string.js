// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
// Copyright the Browserify authors. MIT License.
// Ported from https://github.com/browserify/path-browserify/
// This module is browser compatible.
import { CHAR_DOT, CHAR_FORWARD_SLASH } from "./constants.js";
// Resolves . and .. elements in a path with directory names
export function normalizeString(path, allowAboveRoot, separator, isPathSeparator) {
  let res = "";
  let lastSegmentLength = 0;
  let lastSlash = -1;
  let dots = 0;
  let code;
  for(let i = 0; i <= path.length; ++i){
    if (i < path.length) code = path.charCodeAt(i);
    else if (isPathSeparator(code)) break;
    else code = CHAR_FORWARD_SLASH;
    if (isPathSeparator(code)) {
      if (lastSlash === i - 1 || dots === 1) {
      // NOOP
      } else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== CHAR_DOT || res.charCodeAt(res.length - 2) !== CHAR_DOT) {
          if (res.length > 2) {
            const lastSlashIndex = res.lastIndexOf(separator);
            if (lastSlashIndex === -1) {
              res = "";
              lastSegmentLength = 0;
            } else {
              res = res.slice(0, lastSlashIndex);
              lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
            }
            lastSlash = i;
            dots = 0;
            continue;
          } else if (res.length === 2 || res.length === 1) {
            res = "";
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0) res += `${separator}..`;
          else res = "..";
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0) res += separator + path.slice(lastSlash + 1, i);
        else res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === CHAR_DOT && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vcm1hbGl6ZV9zdHJpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEVBQTBFO0FBQzFFLGlEQUFpRDtBQUNqRCw2REFBNkQ7QUFDN0QscUNBQXFDO0FBRXJDLFNBQVMsUUFBUSxFQUFFLGtCQUFrQix5QkFBeUI7QUFFOUQsNERBQTREO0FBQzVELE9BQU8sU0FBUyxnQkFDZCxJQUFZLEVBQ1osY0FBdUIsRUFDdkIsU0FBaUIsRUFDakIsZUFBMEM7RUFFMUMsSUFBSSxNQUFNO0VBQ1YsSUFBSSxvQkFBb0I7RUFDeEIsSUFBSSxZQUFZLENBQUM7RUFDakIsSUFBSSxPQUFPO0VBQ1gsSUFBSTtFQUNKLElBQUssSUFBSSxJQUFJLEdBQUcsS0FBSyxLQUFLLE1BQU0sRUFBRSxFQUFFLEVBQUc7SUFDckMsSUFBSSxJQUFJLEtBQUssTUFBTSxFQUFFLE9BQU8sS0FBSyxVQUFVLENBQUM7U0FDdkMsSUFBSSxnQkFBZ0IsT0FBUTtTQUM1QixPQUFPO0lBRVosSUFBSSxnQkFBZ0IsT0FBUTtNQUMxQixJQUFJLGNBQWMsSUFBSSxLQUFLLFNBQVMsR0FBRztNQUNyQyxPQUFPO01BQ1QsT0FBTyxJQUFJLGNBQWMsSUFBSSxLQUFLLFNBQVMsR0FBRztRQUM1QyxJQUNFLElBQUksTUFBTSxHQUFHLEtBQ2Isc0JBQXNCLEtBQ3RCLElBQUksVUFBVSxDQUFDLElBQUksTUFBTSxHQUFHLE9BQU8sWUFDbkMsSUFBSSxVQUFVLENBQUMsSUFBSSxNQUFNLEdBQUcsT0FBTyxVQUNuQztVQUNBLElBQUksSUFBSSxNQUFNLEdBQUcsR0FBRztZQUNsQixNQUFNLGlCQUFpQixJQUFJLFdBQVcsQ0FBQztZQUN2QyxJQUFJLG1CQUFtQixDQUFDLEdBQUc7Y0FDekIsTUFBTTtjQUNOLG9CQUFvQjtZQUN0QixPQUFPO2NBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHO2NBQ25CLG9CQUFvQixJQUFJLE1BQU0sR0FBRyxJQUFJLElBQUksV0FBVyxDQUFDO1lBQ3ZEO1lBQ0EsWUFBWTtZQUNaLE9BQU87WUFDUDtVQUNGLE9BQU8sSUFBSSxJQUFJLE1BQU0sS0FBSyxLQUFLLElBQUksTUFBTSxLQUFLLEdBQUc7WUFDL0MsTUFBTTtZQUNOLG9CQUFvQjtZQUNwQixZQUFZO1lBQ1osT0FBTztZQUNQO1VBQ0Y7UUFDRjtRQUNBLElBQUksZ0JBQWdCO1VBQ2xCLElBQUksSUFBSSxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsRUFBRSxVQUFVLEVBQUUsQ0FBQztlQUN0QyxNQUFNO1VBQ1gsb0JBQW9CO1FBQ3RCO01BQ0YsT0FBTztRQUNMLElBQUksSUFBSSxNQUFNLEdBQUcsR0FBRyxPQUFPLFlBQVksS0FBSyxLQUFLLENBQUMsWUFBWSxHQUFHO2FBQzVELE1BQU0sS0FBSyxLQUFLLENBQUMsWUFBWSxHQUFHO1FBQ3JDLG9CQUFvQixJQUFJLFlBQVk7TUFDdEM7TUFDQSxZQUFZO01BQ1osT0FBTztJQUNULE9BQU8sSUFBSSxTQUFTLFlBQVksU0FBUyxDQUFDLEdBQUc7TUFDM0MsRUFBRTtJQUNKLE9BQU87TUFDTCxPQUFPLENBQUM7SUFDVjtFQUNGO0VBQ0EsT0FBTztBQUNUIn0=